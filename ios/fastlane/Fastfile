# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

def build_ipa(build_name, build_number, sentry_dist, patch)
  Dir.chdir("../..") do

    quick_build = ENV['QUICK_BUILD'] == 'true'
    shorebird_initialised = File.exist?('shorebird.yaml')

    unless quick_build
      # Quality check
      sh 'flutter analyze'
      sh 'flutter test -x screenshots'
    end

    if patch
      unless shorebird_initialised
        UI.user_error!('Can not build a patch: Shorebird integration has not been configured.')
      end
      command = 'shorebird patch ios'
      signing = '--no-codesign'
    else
      command = quick_build || !shorebird_initialised ? "flutter build ipa" : "shorebird release ios"
      signing = '--export-options-plist=ios/export_options.plist'
    end

    sh <<~COMMAND
      #{command} \
        --split-debug-info=build/app/outputs/symbols \
        --build-name=#{build_name} \
        --build-number=#{build_number} \
        --dart-define=SENTRY_DSN=#{ENV['SENTRY_DSN']} \
        --dart-define=SENTRY_DIST=#{sentry_dist} \
        #{signing}
    COMMAND
  end
end

platform :ios do

  before_all do
    if ENV['APP_STORE_CONNECT_PRIVATE_KEY']
      # CI
      app_store_connect_api_key(
        key_id: ENV['APP_STORE_CONNECT_KEY_IDENTIFIER'],
        issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
        key_content: ENV['APP_STORE_CONNECT_PRIVATE_KEY']
      )
    else
      # Dev workstation
      ENV['FASTLANE_PASSWORD'] = File.read(ENV['ITUNES_PASSWORD_PATH'])
      ENV['SENTRY_AUTH_TOKEN'] = File.read(ENV['SENTRY_CI_TOKEN_PATH'])
      ENV['MATCH_GIT_PRIVATE_KEY'] = File.read(ENV['CICD_GITHUB_SSH_KEY_PATH'])

      app_store_connect_api_key(
        key_id: ENV['APP_STORE_CONNECT_KEY_IDENTIFIER'],
        issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
        key_filepath: ENV['APP_STORE_CONNECT_PRIVATE_KEY_PATH']
      )
    end

    update_plist(
      plist_path: "Runner/Info.plist",
      block: proc do |plist|
        plist[:CFBundleDisplayName] = ENV['APP_NAME_SCREEN']
      end
    )

    update_plist(
      plist_path: "export_options.plist",
      block: proc do |plist|
        plist[:teamID] = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
      end
    )
  end

  desc "Create a new app on App Store Connect"
  lane :create do
    now = Time.now.getlocal(Time.zone_offset(ENV['TZ'] || 'UTC'))

    produce(
      company_name: ENV['APP_STORE_COMPANY_NAME'],
      app_name: ENV['APP_NAME_DISPLAY'],
      language: ENV['PRIMARY_APP_LANGUAGE'],
      sku: now.strftime('%y%m%d%H%M'),
      app_version: '1.0', # default one, don't mess with it: https://github.com/fastlane/fastlane/issues/18794
      # TBD: check if this actually works:
      enable_services: {
        push_notification: "on",
      }
    )

    upload_app_privacy_details_to_app_store(
      json_path: "fastlane/initial_app_privacy.json"
    )

    # TBD: check if this actually works:
    connect_app = Spaceship::ConnectAPI::App.find(CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier))
    beta_groups = connect_app.get_beta_groups
    unless beta_groups.find { |group| group.name == 'default' && group.is_internal_group }
      connect_app.create_beta_group(group_name: "default", is_internal_group: true)
    end
  end

  desc "Update app metadata and screenshots on App Store Connect"
  lane :deploy_meta do
    Dir.chdir("../..") do
      sh "flutter test --update-goldens --tags=screenshots-ios"
    end
    deliver(skip_binary_upload: true)
  end

  desc "Submit a new Beta Build to TestFlight"
  lane :beta do
    build_name = YAML.load_file('../../pubspec.yaml')['version']

    now = Time.now.getlocal(Time.zone_offset(ENV['TZ'] || 'UTC'))
    build_number = "#{now.year - 2020}#{now.strftime('%m%d%H%M')}"

    sentry_dist = "ios-#{build_number}"

    keychain_name = 'tmp-keychain-db'
    keychain_password = SecureRandom.hex(16)

    create_keychain(
      name: keychain_name,
      password: keychain_password,
      add_to_search_list: true,
      default_keychain: true,
      unlock: true,
      timeout: 3600,
    )

    match(
      type: 'appstore',
      keychain_name: keychain_name,
      keychain_password: keychain_password,
    )

    update_project_provisioning(
      profile: ENV["sigh_com.example.sneakyBirdAppsTemplate_appstore_profile-path"],
      code_signing_identity: "iPhone Distribution",
    )

    update_code_signing_settings(
      team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
      code_sign_identity: "iPhone Distribution",
      entitlements_file_path: "Runner/Runner.entitlements",
      profile_name: ENV["sigh_com.example.sneakyBirdAppsTemplate_appstore_profile-name"],
    )

    # Build ipa after the provisioning profile preparation black magic
    build_ipa(build_name, build_number, sentry_dist, false)

    changelog = read_changelog(
      changelog_path: '../CHANGELOG.md',
    )

    pilot(
      # Submission control
      skip_submission: true,
      submit_beta_review: false,
      expire_previous_builds: true,
      skip_waiting_for_build_processing: true, # can't distribute to external testers if 'true'

      # What's new
      changelog: changelog,

      # Application package
      ipa: "../build/ios/ipa/#{ENV['APP_NAME_SNAKE']}.ipa",

      # beta review details
      beta_app_review_info: {
        contact_email: ENV['DEV_EMAIL'],
        contact_first_name: ENV['DEV_FIRST_NAME'],
        contact_last_name: ENV['DEV_LAST_NAME'],
        contact_phone: ENV['DEV_PHONE'],
        # demo_account_name: "demo@email.com",
        # demo_account_password: "connectapi",
        notes: "Thank you for reviewing my application."
      },

      # Explicit version
      app_version: build_name,
      build_number: build_number,
    )

    if ENV['SENTRY_DSN'] && !ENV['SENTRY_DSN'].empty?
      Dir.chdir("../..") do
        sh "dart run sentry_dart_plugin --sentry-define=dist=#{sentry_dist}"
      end
    end

    add_git_tag(
      tag: "#{build_name}+#{sentry_dist}",
    )

    push_git_tags
  end

  desc "Releases a Shorebird patch for the latest TestFlight build"
  lane :patch do
    build_name = YAML.load_file('../../pubspec.yaml')['version']
    build_number = latest_testflight_build_number(version: build_name)
    sentry_dist = "ios-#{build_number}"

    build_ipa(build_name, build_number, sentry_dist, true)
  end
end
