require "spaceship"

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

def build_ipa(build_name, build_number, build_stamp, patch)
  sync_app_screen_label

  update_plist(
    plist_path: "export_options.plist",
    block: proc do |plist|
      plist[:teamID] = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    end
  )

  Dir.chdir("../..") do

    quick_build = ENV['QUICK_BUILD'] == 'true'
    shorebird_initialised = File.exist?('shorebird.yaml')

    unless quick_build
      # Quality check
      sh 'flutter analyze'
      sh 'flutter test -x screenshots'
    end

    if patch
      unless shorebird_initialised
        UI.user_error!('Can not build a patch: Shorebird integration has not been configured.')
      end
      command = 'shorebird patch ios'
      signing = '--no-codesign'
    else
      command = quick_build || !shorebird_initialised ? "flutter build ipa" : "shorebird release ios"
      signing = '--export-options-plist=ios/export_options.plist'
    end

    sh <<~COMMAND
      #{command} \
        --split-debug-info=build/app/outputs/symbols \
        --build-name=#{build_name} \
        --build-number=#{build_number} \
        --dart-define=SENTRY_DSN=#{ENV['SENTRY_DSN']} \
        --dart-define=SENTRY_DIST=#{ENV['SENTRY_DSN'] ? build_stamp : ''} \
        --dart-define=ONESIGNAL_APP_ID=#{ENV['ONESIGNAL_APP_ID']} \
        #{signing}
    COMMAND
  end
end

def sync_app_screen_label
  Dir.chdir("..") do
    app_label_screen = CGI.escapeHTML(ENV['APP_LABEL_SCREEN'])
    plist_path = 'Runner/Info.plist'

    content = File.read(plist_path)
    updated_content = content.sub(
      %r{(<key>CFBundleDisplayName</key>\s*<string>)([^<]+)(</string>)}, "\\1#{app_label_screen}\\3"
    )

    File.write(plist_path, updated_content)
  end
end

def bundle_id
  ENV['BUNDLE_ID']
end

def onesignal_bundle_id
  "#{ENV['BUNDLE_ID']}.OneSignalNotificationServiceExtension"
end

platform :ios do

  before_all do
    if ENV['CI']
      app_store_connect_api_key(
        key_id: ENV['APP_STORE_CONNECT_KEY_IDENTIFIER'],
        issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
        key_content: ENV['APP_STORE_CONNECT_PRIVATE_KEY']
      )
    else
      ENV['FASTLANE_PASSWORD'] = File.read(ENV['ITUNES_PASSWORD_PATH'])
      ENV['SENTRY_AUTH_TOKEN'] = File.read(ENV['SENTRY_CI_TOKEN_PATH'])
      ENV['MATCH_GIT_PRIVATE_KEY'] = File.read(ENV['CICD_GITHUB_SSH_KEY_PATH'])

      app_store_connect_api_key(
        key_id: ENV['APP_STORE_CONNECT_KEY_IDENTIFIER'],
        issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
        key_filepath: ENV['APP_STORE_CONNECT_PRIVATE_KEY_PATH']
      )
    end
  end

  desc "Create or adjust the app on the Developer Portal and App Store Connect"
  lane :init_app do
    Spaceship::Portal.login(ENV['ITUNES_ID'], ENV['FASTLANE_PASSWORD'])

    now = Time.now.getlocal(Time.zone_offset(ENV['TZ'] || 'UTC'))

    produce(
      company_name: ENV['APP_STORE_COMPANY_NAME'],
      app_name: ENV['APP_LABEL_DASHBOARD'],
      language: 'en-US',
      sku: now.strftime('%y%m%d%H%M'),
      app_version: '1.0', # default one, don't mess with it: https://github.com/fastlane/fastlane/issues/18794
      # TBD: check if this actually works:
      enable_services: {
        push_notification: "on",
      }
    )

    puts 'Submitting essential app privacy details'
    upload_app_privacy_details_to_app_store(
      json_path: "fastlane/initial_app_privacy.json"
    )

    app = Spaceship::Portal.app.find(bundle_id)

    puts 'Ensuring App Groups and Push Notifications capabilities are enabled'
    app.update_service(Spaceship::Portal.app_service.app_group.on)
    app.update_service(Spaceship::Portal.app_service.push_notification.on)

    onesignal_app = Spaceship::Portal.app.find(onesignal_bundle_id)
    if onesignal_app
      puts 'OneSignal extension Bundle Id already exists'
    else
      puts 'Creating OneSignal extension Bundle Id'
      onesignal_app = Spaceship::Portal.app.create!(
        bundle_id: onesignal_bundle_id,
        name: "#{ENV['APP_LABEL_DASHBOARD']} OneSignal Extension",
      )
    end

    onesignal_app.update_service(Spaceship::Portal.app_service.app_group.on)

    onesignal_app_group_id = "group.#{bundle_id}.onesignal"
    onesignal_app_group = Spaceship::Portal.app_group.find(onesignal_app_group_id)
    if onesignal_app_group
      puts 'OneSignal App Group already exists'
    else
      puts 'Creating OneSignal App Group'
      onesignal_app_group = Spaceship::Portal.app_group.create!(
        group_id: onesignal_app_group_id,
        name: "#{ENV['APP_LABEL_DASHBOARD']} OneSignal Group",)
    end

    puts 'Associating OneSignal App Group with the main app'
    app.associate_groups([onesignal_app_group])

    puts 'Associating OneSignal App Group with the extension'
    onesignal_app.associate_groups([onesignal_app_group])
  end

  lane :update_app_screen_label do
    sync_app_screen_label
  end

  desc "Update app metadata and screenshots on App Store Connect"
  lane :deploy_meta do
    Dir.chdir("../..") do
      sh "flutter test --update-goldens --tags=screenshots-ios"
    end
    deliver(skip_binary_upload: true)
  end

  desc "Submit a new Beta Build to TestFlight"
  lane :beta do
    build_name = YAML.load_file('../../pubspec.yaml')['version']

    now = Time.now.getlocal(Time.zone_offset(ENV['TZ'] || 'UTC'))
    build_number = "#{now.year - 2020}#{now.strftime('%m%d%H%M')}"

    build_stamp = "ios-#{build_number}"

    keychain_name = 'tmp-keychain-db'
    keychain_password = SecureRandom.hex(16)

    create_keychain(
      name: keychain_name,
      password: keychain_password,
      add_to_search_list: true,
      default_keychain: true,
      unlock: true,
      timeout: 3600,
    )

    match(
      type: 'appstore',
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      app_identifier: [bundle_id, onesignal_bundle_id],
    )

    code_sign_identity = "iPhone Distribution"
    update_project_provisioning(
      profile: ENV["sigh_#{bundle_id}_appstore_profile-path"],
      code_signing_identity: code_sign_identity,
      target_filter: "Runner",
    )

    update_project_provisioning(
      profile: ENV["sigh_#{onesignal_bundle_id}_appstore_profile-path"],
      code_signing_identity: code_sign_identity,
      target_filter: "OneSignalNotificationServiceExtension",
    )

    update_code_signing_settings(
      team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
      code_sign_identity: code_sign_identity,
      entitlements_file_path: "Runner/Runner.entitlements",
      profile_name: ENV["sigh_#{bundle_id}_appstore_profile-name"],
      targets: 'Runner'
    )

    update_code_signing_settings(
      team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
      code_sign_identity: code_sign_identity,
      entitlements_file_path: "OneSignalNotificationServiceExtension/OneSignalNotificationServiceExtension.entitlements",
      profile_name: ENV["sigh_#{onesignal_bundle_id}_appstore_profile-name"],
      targets: 'OneSignalNotificationServiceExtension'
    )

    # Build ipa after the provisioning profile preparation black magic
    build_ipa(build_name, build_number, build_stamp, false)

    changelog = read_changelog(
      changelog_path: '../CHANGELOG.md',
    )

    pilot(
      # Submission control
      skip_submission: true,
      submit_beta_review: false,
      expire_previous_builds: true,
      skip_waiting_for_build_processing: true, # can't distribute to external testers if 'true'

      # What's new
      changelog: changelog,

      # Application package
      ipa: "../build/ios/ipa/#{ENV['APP_NAME_SNAKE']}.ipa",

      # beta review details
      beta_app_review_info: {
        contact_email: ENV['DEV_EMAIL'],
        contact_first_name: ENV['DEV_FIRST_NAME'],
        contact_last_name: ENV['DEV_LAST_NAME'],
        contact_phone: ENV['DEV_PHONE'],
        # demo_account_name: "demo@email.com",
        # demo_account_password: "connectapi",
        notes: "Thank you for reviewing my application."
      },

      # Explicit version
      app_version: build_name,
      build_number: build_number,
    )

    if ENV['SENTRY_DSN']
      Dir.chdir("../..") do
        sh "dart run sentry_dart_plugin --sentry-define=dist=#{build_stamp}"
      end
    end

    add_git_tag(
      tag: "#{build_name}+#{build_stamp}",
    )

    push_git_tags
  end

  lane :match_all do
    match(
      app_identifier: [bundle_id, onesignal_bundle_id],
    )
    match(
      type: 'appstore',
      app_identifier: [bundle_id, onesignal_bundle_id],
    )
  end

  desc "Releases a Shorebird patch for the latest TestFlight build"
  lane :patch do
    build_name = YAML.load_file('../../pubspec.yaml')['version']
    build_number = latest_testflight_build_number(version: build_name)
    sentry_dist = "ios-#{build_number}"

    build_ipa(build_name, build_number, sentry_dist, true)
  end

  desc "Update APNS certificate in OneSignal"
  lane :update_onesignal do
    onesignal_app_id = ENV['ONESIGNAL_APP_ID']
    unless onesignal_app_id
      raise "OneSignal integration is not configured (app ID is missing)"
    end

    onesignal_api_key_path = ENV['ONESIGNAL_API_KEY_PATH']
    unless File.exist?(onesignal_api_key_path)
      raise "OneSignal API key path does not exist: #{onesignal_api_key_path}"
    end

    base_name = "aps_production_#{ENV['APP_NAME_SNAKE']}"
    directory = "#{ENV['HOME']}/.secrets/app/#{ENV['APP_NAME_SNAKE']}"
    p12_path = "#{directory}/#{base_name}.p12"

    pem(
      pem_name: base_name,
      output_path: directory,
      force: !File.exist?(p12_path),
      p12_password: '',
    )

    onesignal(
      app_id: onesignal_app_id,
      auth_token: File.read(onesignal_api_key_path),
      apns_p12: p12_path,
      apns_p12_password: '',
    )
  end
end
