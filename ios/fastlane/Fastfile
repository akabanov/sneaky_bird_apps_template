require "spaceship"

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want Fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

def flavor
  ENV['FLUTTER_FLAVOR'] || abort("Flutter flavor (FLUTTER_FLAVOR) is not set")
end

def bundle_id
  ENV['BUNDLE_ID']
end

platform :ios do

  before_all do
    if ENV['CI']
      app_store_connect_api_key(
        key_id: ENV['APP_STORE_CONNECT_KEY_IDENTIFIER'],
        issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
        key_content: ENV['APP_STORE_CONNECT_PRIVATE_KEY']
      )
    else
      ENV['FASTLANE_PASSWORD'] = File.read(ENV['ITUNES_PASSWORD_PATH'])
      app_store_connect_api_key(
        key_id: ENV['APP_STORE_CONNECT_KEY_IDENTIFIER'],
        issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
        key_filepath: ENV['APP_STORE_CONNECT_PRIVATE_KEY_PATH']
      )
    end
  end

  desc "Create or adjust the app on the Developer Portal and App Store Connect"
  lane :init_app do
    now = Time.now.getlocal(Time.zone_offset(ENV['TZ'] || 'UTC'))

    Spaceship::Portal.login(ENV['ITUNES_ID'], ENV['FASTLANE_PASSWORD'])

    produce(
      company_name: ENV['APP_STORE_COMPANY_NAME'],
      app_name: ENV['PROJECT_LABEL'],
      language: 'en-US',
      sku: now.strftime('%y%m%d%H%M%S'),
      app_version: '1.0', # the default one, don't mess with it: https://github.com/fastlane/fastlane/issues/18794
      # TBD: check if this actually works:
      enable_services: {
        push_notification: "on",
      }
    )

    # could probably be fetched from the 'produce' results
    app = Spaceship::ConnectAPI::App.find(bundle_id)
    sh "echo 'APP_STORE_APP_ID=#{app.id}' >> ../../.env.build.#{flavor}"

    puts 'Submitting essential app privacy details'
    upload_app_privacy_details_to_app_store(
      json_path: "fastlane/initial_app_privacy.json"
    )

    app = Spaceship::Portal.app.find(bundle_id)

    puts 'Ensuring App Groups and Push Notifications capabilities are enabled'
    app.update_service(Spaceship::Portal.app_service.app_group.on)
    app.update_service(Spaceship::Portal.app_service.push_notification.on)

    onesignal_app = Spaceship::Portal.app.find(onesignal_bundle_id)
    if onesignal_app
      puts 'OneSignal extension Bundle Id already exists'
    else
      puts 'Creating OneSignal extension Bundle Id'
      onesignal_app = Spaceship::Portal.app.create!(
        bundle_id: onesignal_bundle_id,
        name: "#{ENV['PROJECT_LABEL']} OneSignal Extension",
      )
    end

    onesignal_app.update_service(Spaceship::Portal.app_service.app_group.on)

    onesignal_app_group_id = "group.#{bundle_id}.onesignal"
    onesignal_app_group = Spaceship::Portal.app_group.find(onesignal_app_group_id)
    if onesignal_app_group
      puts 'OneSignal App Group already exists'
    else
      puts 'Creating OneSignal App Group'
      onesignal_app_group = Spaceship::Portal.app_group.create!(
        group_id: onesignal_app_group_id,
        name: "#{ENV['PROJECT_LABEL']} OneSignal Group",)
    end

    puts 'Associating OneSignal App Group with the main app'
    app.associate_groups([onesignal_app_group])

    puts 'Associating OneSignal App Group with the extension'
    onesignal_app.associate_groups([onesignal_app_group])

    onesignal_app_id = ENV['ONESIGNAL_APP_ID']
    if onesignal_app_id
      update_onesignal
    end
  end

  lane :update_app_screen_label do
    set_info_plist_value(
      path: 'Runner/Info.plist',
      key: 'CFBundleDisplayName',
      value: ENV['APP_SCREEN_LABEL']
    )
  end

  desc "Update app metadata and screenshots on App Store Connect"
  lane :update_metadata do
    Dir.chdir("../..") do
      sh "flutter test --update-goldens --tags=screenshots-ios"
    end
    # See Deliverfile and the manual: https://docs.fastlane.tools/actions/deliver/
    deliver(skip_binary_upload: true)
  end

  desc "Update APNs certificate in OneSignal"
  lane :update_onesignal do
    puts 'Generating and uploading APNs certificate for OneSignal'

    onesignal_app_id = ENV['ONESIGNAL_APP_ID']
    unless onesignal_app_id
      raise "OneSignal integration is not configured (app ID is missing)"
    end

    onesignal_api_key_path = ENV['ONESIGNAL_API_KEY_PATH']
    unless File.exist?(onesignal_api_key_path)
      raise "OneSignal API key path does not exist: #{onesignal_api_key_path}"
    end

    directory = "#{ENV['HOME']}/.secrets/app/#{ENV['APP_NAME_SNAKE']}"

    base_name = "aps_#{ENV['APP_NAME_SNAKE']}_#{flavor}"
    p12_path = "#{directory}/#{base_name}.p12"

    pem(
      pem_name: base_name,
      output_path: directory,
      force: !File.exist?(p12_path),
      p12_password: '',
    )

    onesignal(
      app_id: onesignal_app_id,
      auth_token: File.read(onesignal_api_key_path),
      apns_p12: p12_path,
      apns_p12_password: '',
    )
  end
end
