#!/bin/bash

TEMPLATE_DOMAIN="example.""com"
TEMPLATE_DOMAIN_REVERSED="com.""example"
TEMPLATE_NAME_SNAKE="sneaky_bird_apps_""template"
TEMPLATE_NAME_SLUG="sneaky-bird-apps-""template"
TEMPLATE_NAME_CAMEL="sneakyBirdApps""Template"
TEMPLATE_ID_SLUG="project-id-""placeholder"

# Checking for required tools
MISSING_TOOLS=()
REQUIRED_TOOLS=("git" "gh" "gcloud" "sed" "flutter" "shorebird" "curl" "app-store-connect" "bundler" "fastlane")
for tool in "${REQUIRED_TOOLS[@]}"; do
  if ! command -v "$tool" &>/dev/null; then
    MISSING_TOOLS+=("$tool")
  fi
done

if [ "${#MISSING_TOOLS[@]}" -ne 0 ]; then
  echo "Error: The following tools are not installed: ${MISSING_TOOLS[*]}"
  exit 1
fi

# Exit if there are uncommitted changes
if [[ -n $(git status --porcelain) ]]; then
  echo "There are uncommitted changes in the repository. Please commit or stash them before proceeding."
  exit 1
fi

# Get Git origin URL and validate its scheme
GIT_REPO_URL=$(git config --get remote.origin.url)
if [[ ! $GIT_REPO_URL =~ ^git@ ]]; then
  echo "Git origin URL must use the SSH scheme (git@...). Current URL: $GIT_REPO_URL"
  exit 1
fi
echo "GIT_REPO_URL=${GIT_REPO_URL}" >> .env

echo "Cleaning up..."
rm LICENSE
flutter clean >> /dev/null
flutter pub upgrade >> /dev/null
echo "Done"

# Project name (snake_case)
PROJECT_DIR=${PWD##*/}
if [[ $PROJECT_DIR =~ ^[a-z][a-z0-9_]*$ ]]; then
  read -r -p "App name [${PROJECT_DIR}]: " APP_NAME_SNAKE
  : "${APP_NAME_SNAKE:=${PROJECT_DIR}}"
fi
# Validate APP_NAME_SNAKE using Dart identifier syntax rules
while [[ ! $APP_NAME_SNAKE =~ ^[a-z][a-z0-9_]*$ ]]; do
  echo "Error: '$APP_NAME_SNAKE' is not a valid Dart identifier."
  echo "It must start with a lowercase letter, and contain only lowercase letters, digits, and underscores."
  read -r -p "Enter a valid project name (snake_case): " APP_NAME_SNAKE
done
echo "APP_NAME_SNAKE=${APP_NAME_SNAKE}" >> .env

APP_NAME_DISPLAY=$(echo "$APP_NAME_SNAKE" | tr '_' ' ' | awk '{for(i=1;i<=NF;i++)sub(/./,toupper(substr($i,1,1)),$i)}1')
sed -i "s/^description:.*$/description: '${APP_NAME_DISPLAY}'/" pubspec.yaml
echo "APP_NAME_DISPLAY='${APP_NAME_DISPLAY}'" >> .env
echo "# ${APP_NAME_DISPLAY}" > readme.md

if [ "${TEMPLATE_NAME_SNAKE}" == "${APP_NAME_SNAKE}" ]; then
  DEFAULT_SCREEN_NAME="SB Apps Template"
else
  DEFAULT_SCREEN_NAME=$APP_NAME_DISPLAY
fi
read -r -p "App screen name [${DEFAULT_SCREEN_NAME}]: " APP_NAME_SCREEN
: "${APP_NAME_SCREEN:=${DEFAULT_SCREEN_NAME}}"
echo "APP_NAME_SCREEN='${APP_NAME_SCREEN}'" >> .env

# Project name (camelCased)
APP_NAME_CAMEL=$(echo "$APP_NAME_SNAKE" | awk -F_ '{for(i=1;i<=NF;i++) printf "%s%s", (i==1?tolower($i):toupper(substr($i,1,1)) tolower(substr($i,2))), ""}')
echo "APP_NAME_CAMEL=${APP_NAME_CAMEL}" >> .env

# Project name (kebab-cased): Google Cloud project, slack channels
APP_NAME_SLUG="${APP_NAME_SNAKE//_/-}"
echo "APP_NAME_SLUG=${APP_NAME_SLUG}" >> .env

# Domain name
GIT_USER=$(gh api user --jq '.login')
FALLBACK_DOMAIN=$([ "$GIT_USER" == "akabanov" ] && [ "$APP_NAME_SNAKE" != "sneaky_bird_apps_template" ] && echo "sneakybird.app" || echo "$TEMPLATE_DOMAIN")
read -r -p "App domain [${FALLBACK_DOMAIN}]: " APP_DOMAIN
: "${APP_DOMAIN:=${FALLBACK_DOMAIN}}"
echo "APP_DOMAIN=${APP_DOMAIN}" >> .env

APP_DOMAIN_REVERSED="$(echo "$APP_DOMAIN" | awk -F. '{for(i=NF;i>0;i--) printf "%s%s", $i, (i>1 ? "." : "")}')"
echo "APP_DOMAIN_REVERSED=${APP_DOMAIN_REVERSED}" >> .env

# Fully-qualified name (and bundle ID in iOS)
BUNDLE_ID="${APP_DOMAIN_REVERSED}.${APP_NAME_CAMEL}"
echo "BUNDLE_ID=${BUNDLE_ID}" >> .env

echo "APP_STORE_COMPANY_NAME='${APP_STORE_COMPANY_NAME}'" >> .env

# Trim to 30 characters: max project ID in Google Cloud, and
# add fully-qualified name hash to make the name quasi-unique
APP_ID_SLUG="$APP_NAME_SLUG"
if [ "${APP_NAME_SLUG}" != "${TEMPLATE_NAME_SLUG}" ]; then
  APP_ID_SLUG="$(echo "$APP_NAME_SLUG" | cut -c-23)-$(echo "$BUNDLE_ID" | md5sum | cut -c1-6)"
fi
echo "APP_ID_SLUG=${APP_ID_SLUG}" >> .env

FALLBACK_APP_LANGUAGE=$(echo "$LANG" | cut -d. -f1 | tr '_' '-')
#read -r -p "Primary language [${FALLBACK_APP_LANGUAGE}]: " PRIMARY_APP_LANGUAGE
: "${PRIMARY_APP_LANGUAGE:=$FALLBACK_APP_LANGUAGE}"
echo "Primary language: ${PRIMARY_APP_LANGUAGE}"
mapfile -t APP_STORE_LANGUAGES < "ios/app-store-languages"
# shellcheck disable=SC2076
if [[ ! " ${APP_STORE_LANGUAGES[*]} " =~ " ${PRIMARY_APP_LANGUAGE} " ]]; then
  echo "'${PRIMARY_APP_LANGUAGE}' is not a valid language option: ${APP_STORE_LANGUAGES[*]}"
  exit 1
fi
echo "PRIMARY_APP_LANGUAGE=${PRIMARY_APP_LANGUAGE}" >> .env

echo "Updating project files"

# Domain name
if [ "${TEMPLATE_DOMAIN}" != "${APP_DOMAIN}" ]; then
  find . -type f -not -path '*/.git/*' -exec sed -i "s/${TEMPLATE_DOMAIN}/${APP_DOMAIN}/g" {} +
  find . -type f -not -path '*/.git/*' -exec sed -i "s/${TEMPLATE_DOMAIN_REVERSED}/${APP_DOMAIN_REVERSED}/g" {} +
  JAVA_PKG_PATH="${APP_DOMAIN_REVERSED//./\/}"
  JAVA_PKG_ROOTS=("android/app/src/androidTest/java" "android/app/src/main/kotlin")
  for path in "${JAVA_PKG_ROOTS[@]}"; do
    mkdir -p "${path}/${JAVA_PKG_PATH}"
    mv "${path}"/com/example/* "${path}/${JAVA_PKG_PATH}"
    find "${path}" -type d -empty -delete
  done
fi

find . -type f -not -path '*/.git/*' -exec sed -i "s/${TEMPLATE_ID_SLUG}/${APP_ID_SLUG}/g" {} +

# App name
if [ "${TEMPLATE_NAME_SNAKE}" != "${APP_NAME_SNAKE}" ]; then
  find . -type f -not -path '*/.git/*' -exec sed -i "s/${TEMPLATE_NAME_SNAKE}/${APP_NAME_SNAKE}/g" {} +
  find . -type f -not -path '*/.git/*' -exec sed -i "s/${TEMPLATE_NAME_SLUG}/${APP_NAME_SLUG}/g" {} +
  find . -type f -not -path '*/.git/*' -exec sed -i "s/${TEMPLATE_NAME_CAMEL}/${APP_NAME_CAMEL}/g" {} +
  find . -depth -name "*${TEMPLATE_NAME_SNAKE}*" -not -path '*/.git/*' \
    -execdir bash -c 'mv "$1" "${1//'"${TEMPLATE_NAME_SNAKE}"'/'"${APP_NAME_SNAKE}"'}"' _ {} \;
fi

flutter test -x screenshots

read -n 1 -r -p "Setup Google Cloud integration? (Y/n) " YN
echo
if [[ ! "$YN" =~ ^[nN] ]]; then
  source ./setup-gcloud.sh
fi

read -n 1 -r -p "Setup Shorebird integration? (Y/n) " YN
echo
if [[ ! "$YN" =~ ^[nN] ]]; then
  source ./setup-shorebird.sh
fi

read -n 1 -r -p "Setup Sentry integration? (Y/n) " YN
echo
if [[ ! "$YN" =~ ^[nN] ]]; then
  source ./setup-sentry.sh
fi

read -n 1 -r -p "Setup Codemagic integration? (Y/n) " YN
echo
if [[ ! "$YN" =~ ^[nN] ]]; then
  source ./setup-codemagic.sh
fi

read -n 1 -r -p "Setup App Store Connect integration? (Y/n) " YN
echo
if [[ ! "$YN" =~ ^[nN] ]]; then
  source setup-app-store.sh
fi

# template debugging
if [ "$APP_NAME_SNAKE" == "sneaky_bird_apps_template" ]; then
  if ! git show-ref --verify --quiet refs/heads/dev; then
    git checkout -b dev
  else
    git checkout dev
  fi
fi

git add -A . > /dev/null
git commit -q -m "Initial setup"

REMOTE_BRANCH=$(git rev-parse --abbrev-ref HEAD)
read -n 1 -r -p "Push initial setup to remote git branch ${REMOTE_BRANCH}? (Y/n) " YN
echo
if [[ ! "$YN" =~ ^[nN] ]]; then
  if ! git ls-remote --exit-code --heads origin "$REMOTE_BRANCH"; then
    git push --set-upstream origin "$REMOTE_BRANCH" > /dev/null
  else
    git push > /dev/null
  fi
else
  exit
fi

read -n 1 -r -p "Start Codemagic integration smoke tests? (Y/n) " YN
echo
if [[ ! "$YN" =~ ^[nN] ]]; then
  source ci.sh ios-beta
fi
